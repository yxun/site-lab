{"version":3,"sources":["components/Post.js","components/Header.js","components/SideCard.js","App.js","serviceWorker.js","index.js"],"names":["Post","state","post","axios","get","then","response","setState","data","this","className","Badge","pill","color","style","fontSize","whiteSpace","Component","Header","Navbar","fixed","light","expand","height","Container","Row","noGutters","Col","Nav","navbar","NavItem","NavLink","href","src","process","alt","width","UncontrolledDropdown","nav","inNavbar","DropdownToggle","caret","DropdownMenu","right","DropdownItem","header","disabled","divider","NavbarBrand","Form","inline","Input","type","classname","placeholder","Button","outline","SideCard","Card","CardImg","top","CardBody","CardTitle","CardSubtitle","CardText","App","xs","order","md","size","tag","offset","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.26c781e7.chunk.js","sourcesContent":["import React, { Component, Fragment } from 'react';\nimport axios from 'axios';\nimport { Badge } from 'reactstrap';\n\nclass Post extends Component {\n    state = { post: null }\n\n    componentDidMount() {\n        axios.get('https://raw.githubusercontent.com/yxun/site-lab/development/README.md')\n            .then(response => this.setState({ post: response.data }));\n    }\n\n    render() {\n        return (\n            <Fragment>\n                { this.state.post && <div className=\"position-relative\">\n\n                <span className=\"d-block pb-2 mb-0 h6 text-lowercase text-info font-weight-bold\">\n                    yxun.github.io\n                    <Badge pill color=\"success\" className=\"text-uppercase px-2 py-1 ml-3 mb-1 align-middle\" \n                        style={{ fontSize: '0.75rem' }}>New</Badge>\n                </span>\n\n                <span className=\"d-block pb-4 h2 text-dark border-bottom border-gray\">README</span>\n\n                <article className=\"pt-5 text-secondary text-justify\" \n                    style={{ fontSize: '1rem', whiteSpace: 'pre-wrap' }}>{this.state.post}</article>\n                    \n                </div>}\n            </Fragment>\n        );\n    }\n}\n\nexport default Post;\n","import React from 'react';\n\nimport {\n    Container, Row, Col, Form, Input, Button, Navbar, Nav,\n    NavbarBrand, NavLink, NavItem, UncontrolledDropdown,\n    DropdownToggle, DropdownMenu, DropdownItem\n} from 'reactstrap';\n\nconst logo = process.env.PUBLIC_URL + 'images/logo512.png';\nconst icon = process.env.PUBLIC_URL + 'images/favicon.ico';\n\nconst Header = () => (\n    <header>\n        <Navbar fixed=\"top\" color=\"light\" light expand=\"xs\" \n            className=\"border-bottom border-gray bg-white\" style={{ height: 80 }}>\n\n            <Container>\n                <Row noGutters className=\"position-relative w-100 align-items-center\">\n                    <Col className=\"d-none d-lg-flex justify-content-start\">\n                        <Nav className=\"mrx-auto\" navbar>\n                            <NavItem className=\"d-flex align-items-center\">\n                                <NavLink className=\"font-weight-bold\" href=\"/\">\n                                    <img src={icon} alt=\"icon\" className=\"img-fluid rounded-circle\" style={{ width: 36 }} />\n                                </NavLink>\n                            </NavItem>\n\n                            <NavItem className=\"d-flex align-items-center\">\n                                <NavLink className=\"font-weight-bold\" href=\"/\">Home</NavLink>\n                            </NavItem>\n\n                            <NavItem className=\"d-flex align-items-center\">\n                                <NavLink className=\"font-weight-bold\" href=\"/\">About</NavLink>\n                            </NavItem>\n\n                            <UncontrolledDropdown className=\"d-flex align-items-center\" nav inNavbar>\n                                <DropdownToggle className=\"font-weight-bold\" nav caret>Learn</DropdownToggle>\n                                <DropdownMenu right>\n                                    <DropdownItem className=\"font-weight-bold text-secondary text-uppercase\" header disabled>Learn React</DropdownItem>\n                                    <DropdownItem divider />\n                                    <DropdownItem><a href=\"https://reactjs.org/docs/getting-started.html\">Documentation</a></DropdownItem>\n                                    <DropdownItem><a href=\"https://reactjs.org/tutorial/tutorial.html\">Tutorial</a></DropdownItem>\n                                    <DropdownItem><a href=\"https://reactjs.org/blog/all.html\">Blog</a></DropdownItem>\n                                </DropdownMenu>\n                            </UncontrolledDropdown>\n                        </Nav>\n                    </Col>\n\n                    <Col className=\"d-flex justify-content-xs-start justify-content-lg-center\">\n                        <NavbarBrand className=\"d-inline-block p-0\" href=\"/\" style={{ width: 80 }}>\n                            <img src={logo} alt=\"logo\" className=\"position-relative img-fluid\" />\n                        </NavbarBrand>\n                    </Col>\n\n                    <Col className=\"d-none d-lg-flex justify-content-end\">\n                        <Form inline>\n                            <Input type=\"search\" classname=\"mr-3\" placeholder=\"Search Notes\" />\n                            <Button type=\"submit\" color=\"info\" outline>Search</Button>\n                        </Form>\n                    </Col>\n                </Row>\n            </Container>\n\n        </Navbar>\n    </header>\n);\n\nexport default Header;\n","import React, { Fragment } from 'react';\n\nimport {\n    Button, Card, CardImg, CardBody,\n    CardTitle, CardSubtitle, CardText\n} from 'reactstrap';\n\nconst banner = process.env.PUBLIC_URL + 'images/logo512.png';\n\nconst SideCard = () => (\n    <Fragment>\n        \n        <Card>\n            <CardImg top width=\"100%\" src={banner} alt=\"banner\" />\n            <CardBody>\n                <CardTitle className=\"h3 mb-2 pt-2 font-weight-bold text-secondary\">Yuanlin Xu</CardTitle>\n                <CardSubtitle className=\"text-secondary mb-3 font-weight-light text-uppercase\" \n                    style={{ fontSize: '0.8rem' }}>Developer</CardSubtitle>\n                <CardText className=\"text-secondary mb-4\" \n                    style={{ fontSize: '0.75rem' }}>Full-stack Learning</CardText>\n                <Button color=\"info\" className=\"font-weight-bold\" outline><a href=\"https://github.com/yxun\">View Profile</a></Button>\n            </CardBody>\n        </Card>\n    </Fragment>\n);\n\nexport default SideCard;\n","import React, { Fragment } from 'react';\nimport { Container, Row, Col } from 'reactstrap';\n\nimport Post from './components/Post';\nimport Header from './components/Header';\nimport SideCard from './components/SideCard';\n\nconst App = () => (\n    <Fragment>\n        <Header />\n\n        <main className=\"my-5 py-5\">\n            <Container className=\"px-0\">\n                <Row noGutters className=\"pt-2 pt-md-5 w-100 px-4 px-xl-0 position-relative\">\n                    <Col xs={{ order: 2 }} md={{ size: 4, order: 1 }} tag=\"aside\" className=\"pb-5 mb-5 pb-md-0 mb-md-0 mx-auto mx-md-0\">\n                        <SideCard />\n                    </Col>\n\n                    <Col xs={{ order: 1 }} md={{ size: 7, offset: 1 }} tag=\"section\" className=\"py-5 mb-5 py-md-0 mb-md-0\">\n                        <Post />\n                    </Col>\n                </Row>\n            </Container>\n        </main>\n\n    </Fragment>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n      // [::1] is the IPv6 localhost address.\n      window.location.hostname === '[::1]' ||\n      // 127.0.0.1/8 is considered localhost for IPv4.\n      window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n      )\n  );\n  \n  export function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n      // The URL constructor is available in all browsers that support SW.\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n      if (publicUrl.origin !== window.location.origin) {\n        // Our service worker won't work if PUBLIC_URL is on a different origin\n        // from what our page is served on. This might happen if a CDN is used to\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n        return;\n      }\n  \n      window.addEventListener('load', () => {\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n  \n        if (isLocalhost) {\n          // This is running on localhost. Let's check if a service worker still exists or not.\n          checkValidServiceWorker(swUrl, config);\n  \n          // Add some additional logging to localhost, pointing developers to the\n          // service worker/PWA documentation.\n          navigator.serviceWorker.ready.then(() => {\n            console.log(\n              'This web app is being served cache-first by a service ' +\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\n            );\n          });\n        } else {\n          // Is not localhost. Just register service worker\n          registerValidSW(swUrl, config);\n        }\n      });\n    }\n  }\n  \n  function registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n      .register(swUrl)\n      .then(registration => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          if (installingWorker == null) {\n            return;\n          }\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the updated precached content has been fetched,\n                // but the previous service worker will still serve the older\n                // content until all client tabs are closed.\n                console.log(\n                  'New content is available and will be used when all ' +\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                );\n  \n                // Execute callback\n                if (config && config.onUpdate) {\n                  config.onUpdate(registration);\n                }\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // \"Content is cached for offline use.\" message.\n                console.log('Content is cached for offline use.');\n  \n                // Execute callback\n                if (config && config.onSuccess) {\n                  config.onSuccess(registration);\n                }\n              }\n            }\n          };\n        };\n      })\n      .catch(error => {\n        console.error('Error during service worker registration:', error);\n      });\n  }\n  \n  function checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n      .then(response => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        const contentType = response.headers.get('content-type');\n        if (\n          response.status === 404 ||\n          (contentType != null && contentType.indexOf('javascript') === -1)\n        ) {\n          // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then(registration => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n          // Service worker found. Proceed as normal.\n          registerValidSW(swUrl, config);\n        }\n      })\n      .catch(() => {\n        console.log(\n          'No internet connection found. App is running in offline mode.'\n        );\n      });\n  }\n  \n  export function unregister() {\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.ready.then(registration => {\n        registration.unregister();\n      });\n    }\n  }\n  ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from \"./App\";\nimport \"./index.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}